// Copyright 2023 Contributors to the Veraison project.
// SPDX-License-Identifier: Apache-2.0
package cca

import (
	"crypto"
	"crypto/ecdsa"
	"reflect"
	"testing"

	"github.com/lestrrat-go/jwx/v2/jwk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var testEvidence = `
a2636b6174d90259a20a48000102030405060708a101a401022001215820
9bffdba675332c9bbb5de2b2da09f818474a989ac20023f828c1620ba80f
61d8225820c839c27230df019840d3a45c96186f8d07193ebc43a841e0dd
e2c463f64c4a1563706174d9018fa219acca5902a0d28444a1013822a059
0233a9190109781c687474703a2f2f61726d2e636f6d2f4343412d535344
2f312e302e300a5820b5973cb68baa9fc55558786b7ec67f69e40df5ba5a
a921cd0c27f40587a011ea19095c58207f454c4602010100000000000000
000003003e00010000005058000000000000190100582101070605040302
01000f0e0d0c0b0a090817161514131211101f1e1d1c1b1a191819096158
210107060504030201000f0e0d0c0b0a090817161514131211101f1e1d1c
1b1a191819095b193003190962677368612d32353619095f84a50162424c
05582007060504030201000f0e0d0c0b0a090817161514131211101f1e1d
1c1b1a19180465332e342e3202582007060504030201000f0e0d0c0b0a09
0817161514131211101f1e1d1c1b1a1918067454462d4d5f534841323536
4d656d507265584950a401624d3105582007060504030201000f0e0d0c0b
0a090817161514131211101f1e1d1c1b1a19180463312e32025820070605
04030201000f0e0d0c0b0a090817161514131211101f1e1d1c1b1a1918a4
01624d3205582007060504030201000f0e0d0c0b0a090817161514131211
101f1e1d1c1b1a19180465312e322e3302582007060504030201000f0e0d
0c0b0a090817161514131211101f1e1d1c1b1a1918a401624d3305582007
060504030201000f0e0d0c0b0a090817161514131211101f1e1d1c1b1a19
1804613102582007060504030201000f0e0d0c0b0a090817161514131211
101f1e1d1c1b1a19181909606c77686174657665722e636f6d5860e6b638
4fae3f6e67f5d4974b3ffd0afa1df02f73b8ff5f02c00f40acf3a29db531
50164ffa343d0eafe0d0d16cf09dc10142a23cced44a59dc290a30935fb4
9861bae391229524f4ae4793d384a376d0c1269653a3603f6c7596906af9
4eda3019acd1590223d28444a1013822a05901b6a70a584072a257931ce1
c5fe2b537e3f50212f91ae52957d402a3b29ec540efa4ecbd1a460a78c68
acf3a63970c0130339cbfe58d9e3dbb3ce11093460c752fc890ab02119ac
cb5840000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000019accd58610476f988091be585ed41801aecfab858548c
63057e16b0e676120bbd0d2f9c29e056c5d41a0130eb9c21517899dc2314
6b28e1b062bd3ea4b315fd219f1cbb528cb6e74ca49be16773734f61a1ca
61031b2bbf3d918f2f94ffc4228e50919544ae19accc677368612d323536
19acd0677368612d32353619acce58205f90365554b0fa86d075b6d6a4ea
5866db1793d4b4e993bb52e564d7279f117819accf845820000000000000
000000000000000000000000000000000000000000000000000058200000
000000000000000000000000000000000000000000000000000000000000
582000000000000000000000000000000000000000000000000000000000
000000005820000000000000000000000000000000000000000000000000
00000000000000005860ae4c66f49debfdceadcfd09f758a57eb8b241ff4
a37a29dca70c8c65fe235e9a94aed1d7e9af70e5f32eb3a592601a0356a0
4f7bdaaa48fef6f96e95d2dc815692943c46d1566d510c6598ef2cfdda24
3807eb847715e331384adb5051152273
`

var testCPAK = `{
	"crv": "P-384",
	"d": "isCQyZWGn2GsE1jwKwIaJqtus4YgOsc1186YVVOLkfdMRLDVgCQ--3maKT3LqgiZ",
	"kty": "EC",
	"x": "IShnxS4rlQiwpCCpBWDzlNLfqiG911FP8akBr-fh94uxHU5m-Kijivp2r2oxxN6M",
	"y": "hM4tr8mWQli1P61xh3T0ViDREbF26DGOEYfbAjWjGNN7pZf-6A4OTHYqEryz6m7U"
}
`

func getECPublicFromJWK(t *testing.T, j []byte) crypto.PublicKey {
	k, err := jwk.ParseKey(j)
	require.Nil(t, err)

	var key crypto.Signer

	err = k.Raw(&key)
	require.NoError(t, err)

	switch key.(type) {
	case *ecdsa.PrivateKey:
		break
	default:
		require.True(t, false, "unknown private key type %v", reflect.TypeOf(key))
	}

	return key.Public()
}

func TestEvidence_Verify_ok(t *testing.T) {
	tv := mustHexDecode(t, testEvidence)

	var actual Evidence
	err := actual.FromCBOR(tv)
	assert.NoError(t, err)

	verifier := getECPublicFromJWK(t, []byte(testCPAK))

	err = actual.Verify(verifier)
	assert.NoError(t, err)
}

func TestEvidence_FromCBOR_fail_empty(t *testing.T) {
	var actual Evidence
	err := actual.FromCBOR([]byte{})
	assert.EqualError(t, err, "CBOR decoding: EOF")
}
